name: ModelUp

on:
  schedule:
    - cron: '0 * * * *'   # cada hora en UTC
  workflow_dispatch:
    inputs:
      universeId:
        description: Roblox universeId
        required: true
        type: string

permissions:
  contents: write

jobs:
  poll-and-save:
    runs-on: ubuntu-latest
    env:
      FILE_PATH: data/ModelUp.json
    steps:
      - uses: actions/checkout@v4

      - name: Ensure jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Resolve universeId
        id: id_resolver
        run: |
          if [[ -n "${{ github.event.inputs.universeId }}" ]]; then
            echo "uid=${{ github.event.inputs.universeId }}" >> "$GITHUB_OUTPUT"
          elif [[ -n "${{ vars.UNIVERSE_ID }}" ]]; then
            echo "uid=${{ vars.UNIVERSE_ID }}" >> "$GITHUB_OUTPUT"
          else
            echo "::error::universeId not provided (use workflow_dispatch input or repo var UNIVERSE_ID)"
            exit 1
          fi

      - name: Fetch votes
        id: fetch
        shell: bash
        run: |
          set -euo pipefail

          UID="${{ steps.id_resolver.outputs.uid }}"
          RESP="$(curl -sS -w '\n%{http_code}' "https://games.roblox.com/v1/games/votes?universeIds=${UID}")"
          BODY="$(printf '%s' "$RESP" | head -n -1)"
          CODE="$(printf '%s' "$RESP" | tail -n1)"

          if [[ "$CODE" -ne 200 ]]; then
            echo "::error::Bad Gateway (HTTP $CODE)"
            exit 1
          fi

          if [[ "$(jq '.data | length' <<<"$BODY")" -eq 0 ]]; then
            echo "::error::Invalid response structure"
            exit 1
          fi

          ID="$(jq -r '.data[0].id' <<<"$BODY")"
          UP="$(jq -r '.data[0].upVotes' <<<"$BODY")"
          DOWN="$(jq -r '.data[0].downVotes' <<<"$BODY")"
          TS="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

          echo "id=$ID" >> "$GITHUB_OUTPUT"
          echo "upVotes=$UP" >> "$GITHUB_OUTPUT"
          echo "downVotes=$DOWN" >> "$GITHUB_OUTPUT"
          echo "timestamp=$TS" >> "$GITHUB_OUTPUT"
          echo "uid=$UID" >> "$GITHUB_OUTPUT"

      - name: Update JSON file
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$FILE_PATH")"

          NEW_ENTRY="$(jq -n \
            --arg ts "${{ steps.fetch.outputs.timestamp }}" \
            --arg uid "${{ steps.fetch.outputs.uid }}" \
            --argjson id  ${{ steps.fetch.outputs.id }} \
            --argjson up  ${{ steps.fetch.outputs.upVotes }} \
            --argjson down ${{ steps.fetch.outputs.downVotes }} \
            '{timestamp:$ts, universeId:$uid, id:$id, upVotes:$up, downVotes:$down}')"

          if [[ -f "$FILE_PATH" ]]; then
            TMP="$(mktemp)"
            jq --argjson entry "$NEW_ENTRY" '. + [$entry]' "$FILE_PATH" > "$TMP"
            mv "$TMP" "$FILE_PATH"
          else
            printf '[\n%s\n]\n' "$NEW_ENTRY" > "$FILE_PATH"
          fi

      - name: Commit if changed
        run: |
          if git diff --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git config user.name "IOxee"
          git config user.email "IOxee@users.noreply.github.com"
          git add "$FILE_PATH"
          git commit -m "ModelUp: update votes $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          git push
